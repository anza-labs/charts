# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json
suite: ConfigMap

templates:
  - configmap.yaml

tests:
  - it: Should fail for unknown provider
    set:
      database.provider: mysql
    asserts:
      - failedTemplate:
          errorMessage: >-
            Invalid database provider: mysql. .Values.database.provider must be
            'sqlite' or 'postgres'.

  - it: Should not create ConfigMap
    set:
      config.create: false
    asserts:
      - hasDocuments:
          count: 0

  - it: Should create ConfigMap with defaults
    asserts:
      - isKind:
          of: ConfigMap
      - isSubset:
          path: data
          content:
            DB_PROVIDER: sqlite
            GEOLITE_DB_URL: "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=%s&suffix=tar.gz"
            PUBLIC_APP_URL: "https://pocket-id.example.local"
            TZ: "Etc/UTC"

  - it: Should create ConfigMap with overrides
    set:
      ingress.host: example.com
      timeZone: Europe/Berlin
      geoliteDatabaseURL: https://example.com/db.tar.gz
    asserts:
      - isKind:
          of: ConfigMap
      - isSubset:
          path: data
          content:
            DB_PROVIDER: sqlite
            GEOLITE_DB_URL: "https://example.com/db.tar.gz"
            PUBLIC_APP_URL: "https://example.com"
            TZ: "Europe/Berlin"

  - it: Should create ConfigMap with publicUI values set (app)
    set:
      config.publicUI.useDefaults: false
      config.publicUI.settings.app:
        appName: "MyApp"
        sessionDuration: 3600
        emailsVerified: true
        allowOwnAccountEdit: true
        disableAnimations: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - isSubset:
          path: data
          content:
            APP_NAME: "MyApp"
            SESSION_DURATION: "3600"
            EMAILS_VERIFIED: "true"
            ALLOW_OWN_ACCOUNT_EDIT: "true"
            DISABLE_ANIMATIONS: "true"

  - it: Should create ConfigMap with publicUI values set (smtp)
    set:
      config.publicUI.useDefaults: false
      config.publicUI.settings.smtp:
        host: "smtp.example.com"
        port: "587"
        from: "noreply@example.com"
        user: "smtpuser"
        password: "smtppass"
        tls: "starttls"
        skipCertVerify: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - isSubset:
          path: data
          content:
            SMTP_HOST: "smtp.example.com"
            SMTP_PORT: "587"
            SMTP_FROM: "noreply@example.com"
            SMTP_USER: "smtpuser"
            SMTP_PASSWORD: "smtppass"
            SMTP_TLS: "starttls"
            SMTP_SKIP_CERT_VERIFY: "false"

  - it: Should create ConfigMap with publicUI values set (email)
    set:
      config.publicUI.useDefaults: false
      config.publicUI.settings.email:
        loginNotificationEnabled: true
        oneTimeAccessEnabled: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - isSubset:
          path: data
          content:
            EMAIL_LOGIN_NOTIFICATION_ENABLED: "true"
            EMAIL_ONE_TIME_ACCESS_ENABLED: "false"

  - it: Should create ConfigMap with publicUI values set (ldap)
    set:
      config.publicUI.useDefaults: false
      config.publicUI.settings.ldap:
        enabled: true
        url: "ldap://example.com"
        bindDN: "cn=admin,dc=example,dc=com"
        bindPassword: "ldapsecret"
        base: "dc=example,dc=com"
        userSearchFilter: "(uid={0})"
        userGroupSearchFilter: "(member={0})"
        skipCertVerify: true
        attributes:
          user:
            uniqueIdentifier: "uid"
            username: "cn"
            email: "mail"
            firstName: "givenName"
            lastName: "sn"
            profilePicture: "jpegPhoto"
          group:
            member: "member"
            uniqueIdentifier: "gid"
            name: "cn"
            adminGroup: "admins"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - isSubset:
          path: data
          content:
            LDAP_ENABLED: "true"
            LDAP_URL: "ldap://example.com"
            LDAP_BIND_DN: "cn=admin,dc=example,dc=com"
            LDAP_BIND_PASSWORD: "ldapsecret"
            LDAP_BASE: "dc=example,dc=com"
            LDAP_USER_SEARCH_FILTER: "(uid={0})"
            LDAP_USER_GROUP_SEARCH_FILTER: "(member={0})"
            LDAP_SKIP_CERT_VERIFY: "true"
            LDAP_ATTRIBUTE_USER_UNIQUE_IDENTIFIER: "uid"
            LDAP_ATTRIBUTE_USER_USERNAME: "cn"
            LDAP_ATTRIBUTE_USER_EMAIL: "mail"
            LDAP_ATTRIBUTE_USER_FIRST_NAME: "givenName"
            LDAP_ATTRIBUTE_USER_LAST_NAME: "sn"
            LDAP_ATTRIBUTE_USER_PROFILE_PICTURE: "jpegPhoto"
            LDAP_ATTRIBUTE_GROUP_MEMBER: "member"
            LDAP_ATTRIBUTE_GROUP_UNIQUE_IDENTIFIER: "gid"
            LDAP_ATTRIBUTE_GROUP_NAME: "cn"
            LDAP_ATTRIBUTE_ADMIN_GROUP: "admins"
